webpackJsonp([0xc0c1d49a769c],{397:function(n,s){n.exports={data:{markdownRemark:{id:"/Users/macbookpro/Desktop/work/g-blog/content/posts/2017-11-11--you-dont-know-js1/index.md absPath of file >>> MarkdownRemark",html:'<h2>变量类型与变量计算</h2>\n<p>相关知识点</p>\n<ul>\n<li>typeof能判断几种类型</li>\n<li>===与==区别</li>\n<li>内存空间问题</li>\n<li>变量的存储方式</li>\n<li>关于JSON</li>\n</ul>\n<h3>typeof</h3>\n<p>typeof 只能分辨出值类型（即五种基本类型null,underfined,Boolean,Number,String），无法分辨出引用类型（Function, Array, Object等都会被识别为Object）（除了函数）。</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//Function</span>\n</code></pre>\n      </div>\n<h3>===与==</h3>\n<p>下面几种情况会发生强制类型转换</p>\n<ul>\n<li>字符串拼接  // 1+‘1’  // ‘11’</li>\n<li>==</li>\n<li>if语句 （if里面的判断会转换成true，false）</li>\n<li>\n<p>逻辑运算符\n所以当需要判断进行判断的时候尽量用全等===，除了下面这个</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token comment">// 判断对象的属性是否存在</span>\nobj<span class="token punctuation">.</span>a <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token comment">// obj.a === null || obj.a === underfined</span>\n</code></pre>\n      </div>\n<h3>内存空间问题</h3>\n<p>首先先理解三种数据结构</p>\n</li>\n<li>栈 （先进后出）  应用于执行上下文，函数调用栈</li>\n<li>堆  （按key-value的形式） 应用于js运行中的变量存储</li>\n<li>队列 （先进先出） 应用于事件循环机制</li>\n</ul>\n<h3>值类型和引用类型</h3>\n<p>像数字和字符串这类属于值类型，会单独分配地址。而像对象,数组,函数属于引用类型，使用地址进行引用。</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token comment">// 值引用</span>\n<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">100</span>\n<span class="token keyword">var</span> b <span class="token operator">=</span> a\na <span class="token operator">=</span> <span class="token number">200</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token comment">// 100</span>\n<span class="token comment">// 引用类型</span>\n<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>age<span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">}</span>\n<span class="token keyword">var</span> b <span class="token operator">=</span> a\na<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">21</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token comment">//21</span>\n</code></pre>\n      </div>\n<h3>JSON</h3>\n<p>记住JSON是数据格式也是js对象</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token comment">//常用方法，可用于对象的深拷贝</span>\nJSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span>a<span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">//对象变成字符串</span>\nJSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">\'{"a":10,"b":20}\'</span><span class="token punctuation">)</span> <span class="token comment">// 字符串变成对象</span>\n</code></pre>\n      </div>\n<h2>原型与原型链</h2>\n<ul>\n<li>判断变量是数组类型</li>\n<li>写一个原型链继承的例子</li>\n<li>描述new一个对象的过程</li>\n<li>zepto源码中如何使用原型链</li>\n</ul>\n<h3>构造函数</h3>\n<p>var a = {} // var a = new Object()\na instanceof Array //判断变量是不是数组</p>\n<h3>原型规则</h3>\n<p>所有引用类型都有<strong>proto</strong>属性 //obj.<strong>proto</strong>\n所有的函数都有一个prototype属性 // func.prototype\n所有的引用类型的<strong>proto</strong>属性指向它的构造函数的prototype属性值 // obj.<strong>proto</strong> === Object.prototype\nfor(item in f){\nif(f.hasOwnPropety(item)){}\n}\n当试图得到一个对象的属性时，如果这个对象本身没有这个属性，那就会去它的<strong>proto</strong>中去寻找</p>\n<h3>原型链</h3>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">function</span> <span class="token function">Elem</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">{</span>\n   <span class="token keyword">this</span><span class="token punctuation">.</span>elem <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\nElem<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">html</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>\n      <span class="token keyword">var</span> elem <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>elem\n      <span class="token keyword">if</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>\n          elem<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> val\n      <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>\n         <span class="token keyword">return</span> elem<span class="token punctuation">.</span>innerHTML \n      <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> div1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Elem</span><span class="token punctuation">(</span><span class="token string">\'hello\'</span><span class="token punctuation">)</span>\ndiv1<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token string">\'hello wrold\'</span><span class="token punctuation">)</span>\n</code></pre>\n      </div>\n<h3>instanceof</h3>\n<p>前面提到无法用typeof判断一个变量是否为数组，用instanceof就可以，instanceof会根据原型链，追寻到构造函数中去，因而可以进行判断。</p>\n<h3>new的过程</h3>\n<p>简单来说就四个步骤</p>\n<ul>\n<li>创建一个新的对象 </li>\n<li>将this指向这个新的对象 // var this = {}</li>\n<li>给对象添加属性和方法 // this.fn = {}</li>\n<li>返回这个对象</li>\n</ul>',frontmatter:{title:"JS基础查缺补漏--变量类型与原型链",subTitle:"正所谓，欲穷千里目，先打好地基...",date:"November 11, 2017",cover:{childImageSharp:{resize:{src:"/static/knowjs-181f9e8beb83dce635b6bf0d02b7d815-160fa.png"}}}}}},pathContext:{path:"/know-js-1/"}}}});
//# sourceMappingURL=path---know-js-1-50760705345c48cf1c46.js.map