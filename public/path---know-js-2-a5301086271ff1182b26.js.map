{"version":3,"sources":["webpack:///path---know-js-2-a5301086271ff1182b26.js","webpack:///./.cache/json/know-js-2.json"],"names":["webpackJsonp","398","module","exports","data","markdownRemark","id","html","frontmatter","title","subTitle","date","cover","childImageSharp","resize","src","pathContext","path"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,GAAA,gIAAAC,KAAA,0mKAA8zKC,aAA6HC,MAAA,mBAAAC,SAAA,qBAAAC,KAAA,oBAAAC,OAA+FC,iBAAmBC,QAAUC,IAAA,kEAAuEC,aAAgBC,KAAA","file":"path---know-js-2-a5301086271ff1182b26.js","sourcesContent":["webpackJsonp([226620773999640],{\n\n/***/ 398:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"id\":\"/Users/macbookpro/Desktop/work/g-blog/content/posts/2017-11-18--you-dont-know-js2/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<h2>作用域与闭包</h2>\\n<p>先看几个问题：</p>\\n<ul>\\n<li>对变量提升的理解</li>\\n<li>说明this几种不同的使用场景</li>\\n<li>创建10个<a>标签，点击的时候弹出对应的序号</li>\\n<li>如何理解作用域</li>\\n<li>实际开发中闭包的作用</li>\\n</ul>\\n<p>知识点：</p>\\n<ul>\\n<li>执行上下文</li>\\n<li>作用域</li>\\n<li>作用域链</li>\\n<li>闭包</li>\\n<li>this</li>\\n</ul>\\n<h3>执行上下文</h3>\\n<p>首先知道js是单线程的，当一个函数调用时会创建一个执行上下文，然后推人函数调用栈，调用结束后会推出栈</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">var</span> color <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'blue'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">changeColor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">var</span> anotherColor <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'red'</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">swapColors</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">var</span> tempColor <span class=\\\"token operator\\\">=</span> anotherColor<span class=\\\"token punctuation\\\">;</span>\\n        anotherColor <span class=\\\"token operator\\\">=</span> color<span class=\\\"token punctuation\\\">;</span>\\n        color <span class=\\\"token operator\\\">=</span> tempColor<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token function\\\">swapColors</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token function\\\">changeColor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p><img src=\\\"https://user-images.githubusercontent.com/15880978/34150833-894ad738-e4e4-11e7-9455-e932f1680119.png\\\" alt=\\\"1\\\">\\n当执行上下文创建的时候有两个生命周期\\n<img src=\\\"https://user-images.githubusercontent.com/15880978/34150979-e9b9cb56-e4e4-11e7-9613-1c3e85690147.png\\\" alt=\\\"599584-391af3aad043c028\\\">\\n而生产变量对象过程中有几个步骤，这些都是在函数执行前作用的，而已函数声明比变量声明优先，当声明变量与函数声明同名时，会被跳过不执行。\\n<img src=\\\"https://user-images.githubusercontent.com/15880978/34151050-216a2730-e4e5-11e7-9655-70a647320b45.png\\\" alt=\\\"599584-7d131cfe82a20d37\\\"></p>\\n<h3>作用域</h3>\\n<p>作用域只是一套规则，用来管理不同子作用域的变量，例如js在es6之前没有块级作用域，使得各函数间容易污染变量。</p>\\n<h3>作用域链</h3>\\n<p>你可以把作用域链当做一条绳子，你可以顺着绳子访问到每个节点上的值</p>\\n<h3>关于this</h3>\\n<p>关于this只要记住几句话</p>\\n<ul>\\n<li>this要在执行时才能确认值，定义时无法确认</li>\\n<li>this的指向为调用者函数的拥有者，独立调用则为underfined，非严格模式为window</li>\\n</ul>\\n<p>this的几种执行方法</p>\\n<ul>\\n<li>作为构造函数执行</li>\\n<li>作为对象属性执行</li>\\n<li>作为普通函数执行</li>\\n<li>call,apply bind</li>\\n</ul>\\n<h3>闭包</h3>\\n<p>所谓闭包就是在其他执行上下文中，访问到函数的内部变量，当函数被推出后，变量的引用保留而不被销毁，一般应用于模块化私有变量。</p>\\n<p>闭包的形成的两个条件</p>\\n<ul>\\n<li>\\n<p>在函数内部创建新的函数</p>\\n</li>\\n<li>\\n<p>新的函数在执行时访问了函数的变量对象</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">//闭包的应用</span>\\n<span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n<span class=\\\"token keyword\\\">var</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> b <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">20</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span>num1<span class=\\\"token punctuation\\\">,</span> num2<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">var</span> num1 <span class=\\\"token operator\\\">=</span> <span class=\\\"token operator\\\">!</span><span class=\\\"token operator\\\">!</span>num1 <span class=\\\"token operator\\\">?</span> num1 <span class=\\\"token punctuation\\\">:</span> a<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">var</span> num2 <span class=\\\"token operator\\\">=</span> <span class=\\\"token operator\\\">!</span><span class=\\\"token operator\\\">!</span>num2 <span class=\\\"token operator\\\">?</span> num2 <span class=\\\"token punctuation\\\">:</span> b<span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">return</span> num1 <span class=\\\"token operator\\\">+</span> num2<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\nwindow<span class=\\\"token punctuation\\\">.</span>add <span class=\\\"token operator\\\">=</span> add<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n</li>\\n</ul>\\n<p>add(10, 20);</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code></code></pre>\\n      </div>\",\"frontmatter\":{\"title\":\"JS基础查缺补漏--作用域与闭包\",\"subTitle\":\"面试必考题，说明其必须掌握的重要性。\",\"date\":\"November 18, 2017\",\"cover\":{\"childImageSharp\":{\"resize\":{\"src\":\"/static/knowjs-181f9e8beb83dce635b6bf0d02b7d815-160fa.png\"}}}}}},\"pathContext\":{\"path\":\"/know-js-2/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---know-js-2-a5301086271ff1182b26.js","module.exports = {\"data\":{\"markdownRemark\":{\"id\":\"/Users/macbookpro/Desktop/work/g-blog/content/posts/2017-11-18--you-dont-know-js2/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<h2>作用域与闭包</h2>\\n<p>先看几个问题：</p>\\n<ul>\\n<li>对变量提升的理解</li>\\n<li>说明this几种不同的使用场景</li>\\n<li>创建10个<a>标签，点击的时候弹出对应的序号</li>\\n<li>如何理解作用域</li>\\n<li>实际开发中闭包的作用</li>\\n</ul>\\n<p>知识点：</p>\\n<ul>\\n<li>执行上下文</li>\\n<li>作用域</li>\\n<li>作用域链</li>\\n<li>闭包</li>\\n<li>this</li>\\n</ul>\\n<h3>执行上下文</h3>\\n<p>首先知道js是单线程的，当一个函数调用时会创建一个执行上下文，然后推人函数调用栈，调用结束后会推出栈</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">var</span> color <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'blue'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">changeColor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">var</span> anotherColor <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'red'</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">swapColors</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">var</span> tempColor <span class=\\\"token operator\\\">=</span> anotherColor<span class=\\\"token punctuation\\\">;</span>\\n        anotherColor <span class=\\\"token operator\\\">=</span> color<span class=\\\"token punctuation\\\">;</span>\\n        color <span class=\\\"token operator\\\">=</span> tempColor<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token function\\\">swapColors</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token function\\\">changeColor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p><img src=\\\"https://user-images.githubusercontent.com/15880978/34150833-894ad738-e4e4-11e7-9455-e932f1680119.png\\\" alt=\\\"1\\\">\\n当执行上下文创建的时候有两个生命周期\\n<img src=\\\"https://user-images.githubusercontent.com/15880978/34150979-e9b9cb56-e4e4-11e7-9613-1c3e85690147.png\\\" alt=\\\"599584-391af3aad043c028\\\">\\n而生产变量对象过程中有几个步骤，这些都是在函数执行前作用的，而已函数声明比变量声明优先，当声明变量与函数声明同名时，会被跳过不执行。\\n<img src=\\\"https://user-images.githubusercontent.com/15880978/34151050-216a2730-e4e5-11e7-9655-70a647320b45.png\\\" alt=\\\"599584-7d131cfe82a20d37\\\"></p>\\n<h3>作用域</h3>\\n<p>作用域只是一套规则，用来管理不同子作用域的变量，例如js在es6之前没有块级作用域，使得各函数间容易污染变量。</p>\\n<h3>作用域链</h3>\\n<p>你可以把作用域链当做一条绳子，你可以顺着绳子访问到每个节点上的值</p>\\n<h3>关于this</h3>\\n<p>关于this只要记住几句话</p>\\n<ul>\\n<li>this要在执行时才能确认值，定义时无法确认</li>\\n<li>this的指向为调用者函数的拥有者，独立调用则为underfined，非严格模式为window</li>\\n</ul>\\n<p>this的几种执行方法</p>\\n<ul>\\n<li>作为构造函数执行</li>\\n<li>作为对象属性执行</li>\\n<li>作为普通函数执行</li>\\n<li>call,apply bind</li>\\n</ul>\\n<h3>闭包</h3>\\n<p>所谓闭包就是在其他执行上下文中，访问到函数的内部变量，当函数被推出后，变量的引用保留而不被销毁，一般应用于模块化私有变量。</p>\\n<p>闭包的形成的两个条件</p>\\n<ul>\\n<li>\\n<p>在函数内部创建新的函数</p>\\n</li>\\n<li>\\n<p>新的函数在执行时访问了函数的变量对象</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">//闭包的应用</span>\\n<span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n<span class=\\\"token keyword\\\">var</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> b <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">20</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span>num1<span class=\\\"token punctuation\\\">,</span> num2<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">var</span> num1 <span class=\\\"token operator\\\">=</span> <span class=\\\"token operator\\\">!</span><span class=\\\"token operator\\\">!</span>num1 <span class=\\\"token operator\\\">?</span> num1 <span class=\\\"token punctuation\\\">:</span> a<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">var</span> num2 <span class=\\\"token operator\\\">=</span> <span class=\\\"token operator\\\">!</span><span class=\\\"token operator\\\">!</span>num2 <span class=\\\"token operator\\\">?</span> num2 <span class=\\\"token punctuation\\\">:</span> b<span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">return</span> num1 <span class=\\\"token operator\\\">+</span> num2<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\nwindow<span class=\\\"token punctuation\\\">.</span>add <span class=\\\"token operator\\\">=</span> add<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n</li>\\n</ul>\\n<p>add(10, 20);</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code></code></pre>\\n      </div>\",\"frontmatter\":{\"title\":\"JS基础查缺补漏--作用域与闭包\",\"subTitle\":\"面试必考题，说明其必须掌握的重要性。\",\"date\":\"November 18, 2017\",\"cover\":{\"childImageSharp\":{\"resize\":{\"src\":\"/static/knowjs-181f9e8beb83dce635b6bf0d02b7d815-160fa.png\"}}}}}},\"pathContext\":{\"path\":\"/know-js-2/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/know-js-2.json\n// module id = 398\n// module chunks = 226620773999640"],"sourceRoot":""}